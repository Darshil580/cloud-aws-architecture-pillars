AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcCIDR:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'

  PublicSubnet1CIDR:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'CIDR block for the first public subnet'

  PublicSubnet2CIDR:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'CIDR block for the second public subnet'

  PublicSubnet3CIDR:
    Type: String
    Default: '10.0.3.0/24'
    Description: 'CIDR block for the third public subnet'

  PrivateSubnet1CIDR:
    Type: String
    Default: '10.0.4.0/24'
    Description: 'CIDR block for the first private subnet'

  PrivateSubnet2CIDR:
    Type: String
    Default: '10.0.5.0/24'
    Description: 'CIDR block for the second private subnet'

  PrivateSubnet3CIDR:
    Type: String
    Default: '10.0.6.0/24'
    Description: 'CIDR block for the third private subnet'

  DBInstanceIdentifier:
    Type: String
    Description: 'The name of the RDS MZ instance'
    Default: 'term-db-instance'

  MasterUsername:
    Type: String
    Description: 'Username for the master DB user'
    Default: 'master'

  MasterUserPassword:
    Type: String
    NoEcho: true
    Description: 'Password for the master DB user'
    Default: '12345678'

  KeyName:
    Type: String
    Description: 'EC2 Key name for connection'
    Default: 'darshil'

Resources:

# VPC Creation............

  MyVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref 'VpcCIDR'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: 'cloud-vpc'

# Public Subnet Creation

  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'MyVPC'
      CidrBlock: !Ref 'PublicSubnet1CIDR'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'PublicSubnet1'

  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'MyVPC'
      CidrBlock: !Ref 'PublicSubnet2CIDR'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'PublicSubnet2'

  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'MyVPC'
      CidrBlock: !Ref 'PublicSubnet3CIDR'
      AvailabilityZone: !Select [2, !GetAZs '']
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'PublicSubnet3'

# Route Table Formation

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

# Association with Route Table

  SubnetAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  SubnetAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

  SubnetAssociationPublic3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref MyRouteTable

# One Internet Gateway for one Public Route Table

  MyInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref 'MyVPC'
      InternetGatewayId: !Ref 'MyInternetGateway'

  DefaultRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: 'AttachGateway'
    Properties:
      RouteTableId: !Ref 'MyRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'MyInternetGateway'

##################################################################

  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'MyVPC'
      CidrBlock: !Ref 'PrivateSubnet1CIDR'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: 'PrivateSubnet1'

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  SubnetAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'MyVPC'
      CidrBlock: !Ref 'PrivateSubnet2CIDR'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: 'PrivateSubnet2'

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  SubnetAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref 'MyVPC'
      CidrBlock: !Ref 'PrivateSubnet3CIDR'
      AvailabilityZone: !Select [2, !GetAZs '']
      Tags:
        - Key: Name
          Value: 'PrivateSubnet3'

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC

  SubnetAssociationPrivate3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

# Second Internet Gateway for one Private Route Tables

  # Route1:
  #   Type: 'AWS::EC2::Route'
  #   DependsOn: 'AttachGateway'
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTable1'
  #     DestinationCidrBlock: '0.0.0.0/0'
  #     GatewayId: !Ref 'MyInternetGateway2'

  # Route2:
  #   Type: 'AWS::EC2::Route'
  #   DependsOn: 'AttachGateway'
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTable2'
  #     DestinationCidrBlock: '0.0.0.0/0'
  #     GatewayId: !Ref 'MyInternetGateway2'

  # Route3:
  #   Type: 'AWS::EC2::Route'
  #   DependsOn: 'AttachGateway'
  #   Properties:
  #     RouteTableId: !Ref 'PrivateRouteTable3'
  #     DestinationCidrBlock: '0.0.0.0/0'
  #     GatewayId: !Ref 'MyInternetGateway2'

###########################################################

  EC2SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: "ec2-sg"
      GroupDescription: "Security group for EC2 instance with SSH and HTTP access"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: "tcp"
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"

  PublicInstance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0230bd60aa48260c6'  
      InstanceType: 't2.micro'
      SubnetId: !Ref 'PublicSubnet1'
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: 'PublicInstance1'
      SecurityGroupIds:
        - !Ref PublicInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Your user data script goes here
          echo "Hello from instance 1!" >> /var/log/userdata.log
          sudo yum install -y git
          sudo dnf install -y postgresql15
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          source ~/.bashrc
          git clone https://github.com/Darshil580/cloud-aws-architecture-pillars.git
          nvm --version
          nvm install 14.17.0
          npm install -g typescript
          npm install -g pm2
          cd cloud-aws-architecture-pillars
          npm install
          npm run build-prod
          node your_app.js
          pm2 start app.js

  PublicInstance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0230bd60aa48260c6'
      InstanceType: 't2.micro'
      SubnetId: !Ref 'PublicSubnet2'
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: 'PublicInstance2'
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
        - !Ref PublicInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Your user data script goes here
          echo "Hello from instance 2!" >> /var/log/userdata.log
          sudo yum install -y git
          sudo dnf install -y postgresql15
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          source ~/.bashrc
          git clone https://github.com/Darshil580/cloud-aws-architecture-pillars.git
          nvm --version
          nvm install 14.17.0
          npm install -g typescript
          npm install -g pm2
          cd cloud-aws-architecture-pillars
          npm install
          npm run build-prod
          node your_app.js
          pm2 start app.js

  PublicInstance3:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0230bd60aa48260c6' 
      InstanceType: 't2.micro'
      SubnetId: !Ref 'PublicSubnet3'
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: 'PublicInstance3'
      SecurityGroupIds:
        - !Ref PublicInstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # Your user data script goes here
          echo "Hello from instance 3!" >> /var/log/userdata.log
          sudo yum install -y git
          sudo dnf install -y postgresql15
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
          source ~/.bashrc
          git clone https://github.com/Darshil580/cloud-aws-architecture-pillars.git
          nvm --version
          nvm install 14.17.0
          npm install -g typescript
          npm install -g pm2
          cd cloud-aws-architecture-pillars
          npm install
          npm run build-prod
          node your_app.js
          pm2 start app.js

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !GetAtt MyLoadBalancerSecurityGroup.GroupId
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: 'MyLoadBalancer'

  MyLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'MyLoadBalancerSecurityGroup'
      GroupDescription: 'Security group for the load balancer'
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: 'MyTargetGroup'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: '/'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      TargetType: instance
      Targets:
        - Id: !Ref PublicInstance1
        - Id: !Ref PublicInstance2
        - Id: !Ref PublicInstance3

  MyKMSKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: "My KMS Key"
      KeyPolicy:
        Version: "2012-10-17"
        Id: "key-default-1"
        Statement:
          - Effect: "Allow"
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"

  RDSSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupName: 'MyDBSubnetGroup'
      SubnetIds:
        - !Ref 'PrivateSubnet1'
        - !Ref 'PrivateSubnet2'
        - !Ref 'PrivateSubnet3'
      DBSubnetGroupDescription: 'Subnet group for RDS PostgreSQL database'
      Tags:
        - Key: Name
          Value: 'MyDBSubnetGroup'

  PublicInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for Public Instances'
      VpcId: !Ref 'MyVPC'

  RDSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group for RDS Instance'
      VpcId: !Ref 'MyVPC'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '5432'
          ToPort: '5432'
          SourceSecurityGroupId: !Ref PublicInstanceSecurityGroup

  # MyDBInstance:
  #   Type: 'AWS::RDS::DBInstance'
  #   Properties:
  #     DBInstanceIdentifier : !Ref DBInstanceIdentifier
  #     AllocatedStorage: '20'
  #     DBInstanceClass: 'db.t2.micro'
  #     Engine: 'postgres'
  #     EngineVersion: '15.4'
  #     MasterUsername: !Ref MasterUsername
  #     MasterUserPassword: !Ref MasterUserPassword
  #     MultiAZ: 'true'
  #     PubliclyAccessible: 'false'
  #     VPCSecurityGroups:
  #       - !Ref RDSSecurityGroup
  #     DBSubnetGroupName: !Ref RDSSubnetGroup

Outputs:
  RDSSecurityGroup:
    Value: !Ref RDSSecurityGroup
    Description: 'Security Group ID for RDS Instance'
